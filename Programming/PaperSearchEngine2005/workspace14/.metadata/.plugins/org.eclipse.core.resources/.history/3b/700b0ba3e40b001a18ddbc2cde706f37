/*
 * Created on Aug 11, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package Retrieval;

import java.io.File;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;
import Storage.FileIO;

/**
 * @author MeysamH & ManiBH
 * 
 * TODO To change the template for this generated type comment go to Window -
 * Preferences - Java - Code Style - Code Templates
 */
public class Search {
	private FileIO io = new FileIO();

	private Vector lexVctr = null;

	private File termDoc = null;

	private String query = "", path = "";

	private int docNum = 0;

	float treshold = 0;

	public Search(File lexical, String path, File queryFile, float treshold) {
		this.lexVctr = io.readFileAsVector(lexical);
		this.path = path;
		this.treshold = treshold;
		//		init(queryFile);
	}

	private String stemming(StringBuffer strBuf) {
		String str = strBuf.toString(), buf = "";
		for (int i = 0; i < str.length(); i++) {
			if (Character.isLetter(str.charAt(i))
					|| Character.isSpace(str.charAt(i))) {
				if (i != 0
						&& (!Character.isSpace(buf.charAt(buf.length() - 1)) || Character
								.isLetter(str.charAt(i))))
					buf += (new Character(str.charAt(i))).toString();
				else if (i == 0)
					buf += (new Character(str.charAt(i))).toString();
			} else {
				if (i != 0
						&& (!Character.isSpace(buf.charAt(buf.length() - 1)) || Character
								.isLetter(str.charAt(i))))
					buf += " ";
			}
		}
		return buf.toUpperCase();
	}

	private StringBuffer lexicalAnalysis(StringBuffer strBuf) {
		try {
			String str = "", temp = "";
			str = (strBuf.toString()).toUpperCase();
			strBuf = strBuf.delete(0, strBuf.length());
			strBuf.append(str);
			str = "";
			int home = 0, len = 0, dif = 0;
			for (int i = 0; i < lexVctr.size(); i++) {
				dif = 0;
				//				str.replaceAll((String)lexVctr.get(i),"");
				str = strBuf.toString();
				while (str.indexOf(" " + (String) lexVctr.get(i) + " ") != -1) {
					home = str.indexOf(" " + (String) lexVctr.get(i) + " ");
					len = (" " + (String) lexVctr.get(i)).length() + home;
					strBuf.delete(home + dif, len + dif);
					str = str.substring(len);
					dif += home;
				}
			}
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e.getMessage());
		}
		return strBuf;
	}

	public Set init(File queryFile) {
		try {
			docNum = Integer.parseInt(io.readFileAsString(new File(path
					+ "docnum.txt"), 1));
			termDoc = new File(path + "termDoc.txt");
			int cntr = 1;
			String temp = "";
			while (true) {
				temp = io.readFileAsString(queryFile, cntr++);
				if (temp == null) {
					query = query.trim();
					break;
				}
				query += temp.trim() + " ";
			}//end while
			query = stemming(lexicalAnalysis(new StringBuffer(query)));
			System.out.println(query);
			Set words = new HashSet();//kalamat ba faseleye kanonie 3
			HashMap wordWeight = new HashMap();//shomare kalamat be
			//onvane kelid va freq be onvane value
			insertWordsHash(words, query);// kalamat ra ba fasel kanoni dar set
										  // mirizad
			Iterator wordsIt = words.iterator();
			String keyStr = "";
			float maxFreq = 0, tmp = 0;
			while (wordsIt.hasNext()) {
				keyStr = (String) wordsIt.next();
				tmp = findFrequency(query, keyStr);
				if (maxFreq < tmp)
					maxFreq = tmp;
			}
			checkExistingWords(wordWeight, words, maxFreq, new File(path
					+ "TermHashFile.txt"),new File(path+"WorkHashFile.txt"));
			Set foundQuery = searchQuery(wordWeight);
			Set resultSet = new HashSet();//hal dar inja moalefe haye star fogh
										  // ra migozarim
			Iterator it = foundQuery.iterator();
			int docNumber = 0;
			String tempStr = "";
			File star = new File(path + "star.txt");
			while (it.hasNext()) {
				docNumber = ((Integer) it.next()).intValue();
				tempStr = io.readFileAsString(star, docNumber);
				while (true) {
					if (tempStr==null)
						break;
					if (tempStr.indexOf(" ") == -1) {
						if(tempStr.length()!=0)
							resultSet.add(new Integer(Integer.parseInt(temp)));
						break;
					}
					resultSet.add(new Integer(Integer.parseInt(tempStr
							.substring(0, tempStr.indexOf(" ")))));
					tempStr = tempStr.substring(tempStr.indexOf(" ") + 1);
				}
			}
			return resultSet;
		} catch (Exception e) {
			System.out.println(e.getMessage());
			return null;
		}

		//		float sim=calculateSimilarity();
	}//end init

	private Set searchQuery(HashMap wordWeight) {
		Set set = new HashSet();
		HashMap doc = null;
		String temp = "";
		float sim;
		File docTree = new File(path + "docDocTree.txt");
		temp = io.readFileAsString(docTree, 1);
		int lastLevelNum = 0;
		if (temp != null) {
			Vector lineNumber = new Vector();
			int centeralId;
			String tempStr = "";//baraye check kardane inke aya onsore payani
								// ast '*' ya miani
			lastLevelNum = Integer.parseInt(temp);
			for (int i = 1; i <= lastLevelNum; i++) {
				temp = io.readFileAsString(docTree, i + 1);
				centeralId = Integer.parseInt(temp.substring(0, temp
						.indexOf(" ")));
				temp = temp.substring(temp.indexOf(" ") + 1);
				doc = io.readDocTermAsHashMap(new File(path + "centralID.txt"),
						centeralId);
				sim = calculateSimilarity(wordWeight, doc);
				if (sim > treshold) {
					while (true) {
						if (temp.indexOf(",") == -1)//dar soorati ke kare in
													// satr tamam shode bashad
							break;
						centeralId = Integer.parseInt(temp.substring(0, temp
								.indexOf(',')));
						temp = temp.substring(temp.indexOf(',') + 1);
						if (temp.indexOf(" ") != -1) {
							tempStr = temp.substring(0, temp.indexOf(" "));
						} else {
							tempStr = temp;
						}
						//dar if zir ma shomare khat hayi ke bayad badan jostojoo
						// konim ra dar set gharar midahim
						if (tempStr.indexOf("*") == -1)//dar soorati ke onsor
													   // entehayi nabashad
						{
							doc = io.readDocTermAsHashMap(new File(path
									+ "centralID.txt"), centeralId);
							sim = calculateSimilarity(wordWeight, doc);
							if(sim > treshold)
							lineNumber.add(new Integer(Integer.parseInt(tempStr)));
						}
						else
						{
							doc = io.readDocTermAsHashMap(new File(path
									+ "docTermFile.txt"), centeralId);
							sim = calculateSimilarity(wordWeight, doc);
							//dar soorati ke onsore entehayee bashad
							if (sim > treshold)
								set.add(new Integer(centeralId));
						}
						if (temp.indexOf(" ") == -1)
							break;
						temp = temp.substring(temp.indexOf(" ") + 1);
					}
				}
			}// end of for
			//dar while zir be trace kardane derakht mashghool mishavim
			int readLineNumber = 0;
			while (!lineNumber.isEmpty()) {
				readLineNumber = ((Integer) lineNumber
						.remove(lineNumber.size() - 1)).intValue();
				
				//lineNumber.remove(lineNumber.size()-1);
				temp = io.readFileAsString(docTree, readLineNumber);//dar inja oon khate morede nazar ra mikhanim
				temp = temp.substring(temp.indexOf(" ") + 1);//dar inja ghesmate aval khat ra ke ghablan check shode bar midarim
				while (true) {
					if (temp.indexOf(",") == -1)//dar soorati ke kare in satr
												// tamam shode bashad
						break;
					centeralId = Integer.parseInt(temp.substring(0, temp
							.indexOf(',')));
					temp = temp.substring(temp.indexOf(',') + 1);
					if (temp.indexOf(" ") != -1) {
						tempStr = temp.substring(0, temp.indexOf(" "));
					} else {
						tempStr = temp;
					}
					//dar if zir ma shomare khat hayi ke bayad badan jostojoo
					// konim ra dar set gharar midahim
					if (tempStr.indexOf("*") == -1)//dar soorati ke onsor
												   // entehayi nabashad
					{
						doc = io.readDocTermAsHashMap(new File(path
								+ "centralID.txt"), centeralId);
						sim = calculateSimilarity(wordWeight, doc);
						if(sim > treshold)
						lineNumber.add(new Integer(Integer.parseInt(tempStr)));
					}
					else
					{
						doc = io.readDocTermAsHashMap(new File(path
								+ "docTermFile.txt"), centeralId);
						sim = calculateSimilarity(wordWeight, doc);
						//dar soorati ke onsore entehayee bashad
						if (sim > treshold)
							set.add(new Integer(centeralId));
					}
					if (temp.indexOf(" ") == -1)
						break;
					temp = temp.substring(temp.indexOf(" ") + 1);
				}
			}
		}//end main if
		else {
			// agar clustery ijad nashode bod bayad tamame moalefe ha
			// chek shavand az marixe doc*term.
			int cntr = 1;
			sim = 0;
			while (true) {
				doc = io.readDocTermAsHashMap(
						new File(path + "doctermfile.txt"), cntr++);
				if (doc==null)
					break;
				sim = calculateSimilarity(wordWeight, doc);
				if (sim > treshold)
					set.add(new Integer(cntr - 1));
			}
		}
		return set;
	}

	private float calculateSimilarity(HashMap query, HashMap doc) {
		//		HashMap doc1 = io.readDocTermAsHashMap(docTerm, docNo1);
		//		HashMap doc2 = io.readDocTermAsHashMap(docTerm, docNo2);
		if (query == null || doc == null)
			return 0;
		Iterator it1 = query.keySet().iterator();
		Iterator it2 = doc.values().iterator();
		float sqrSigmaDoc1 = 0, sqrSigmaDoc2 = 0, sigmaDoc1Doc2 = 0;
		while (it1.hasNext()) {
			Integer intObj = (Integer) it1.next();
			sqrSigmaDoc1 += Math.pow(((Float) query.get(intObj)).floatValue(),
					2);
			if (doc.get(intObj) != null) {
				sigmaDoc1Doc2 += ((Float) query.get(intObj)).floatValue()
						* ((Float) doc.get(intObj)).floatValue();
			}
		}
		while (it2.hasNext()) {
			sqrSigmaDoc2 += Math.pow(((Float) it2.next()).floatValue(), 2);
		}
		return (float) (sigmaDoc1Doc2 / (Math.sqrt(sqrSigmaDoc1 * sqrSigmaDoc2)));
	}
//dar tabe zir yek nokte mohem ast va un inke az file workHash mikhanim
	//amma shomare termi ke az file termdoc biroonmikeshim bayad haman shomare termHash bashad
	private void checkExistingWords(HashMap wordWeight, Set words,
			float maxFreq, File termHash,File workHash) {
		String temp = "", dummy = "";
		int cntr = 1;
		float weight = 0;
		float idf = 0;
		String termDocLine = "";
		int counter = 0;
		while (true) {
			temp = io.readFileAsString(workHash, cntr++);
			if (temp == null)
				break;
			dummy = temp.substring(0, temp.indexOf("$"));
			temp = temp.substring(temp.indexOf("$") + 1);
			if (words.contains(dummy)) {
				weight = findFrequency(query, dummy);
				weight /= (maxFreq * 0.5);
				weight += 0.5;
				//termDocLine = io.readFileAsString(termDoc, Integer
					//	.parseInt(temp) + 1);
				termDocLine=io.readFileAsString(termDoc,io.getTermNumber(termHash,dummy));
				counter = 0;
				//dar for zir tedad doc hayi ke in onsor dar anha gheir sefr
				// ast negah midarim
				while (termDocLine.indexOf(" ") != -1) {
					counter++;
					termDocLine = termDocLine.substring(termDocLine
							.indexOf(" ") + 1);
				}
				idf = (float) Math.log(docNum / counter);
				weight *= idf;
				wordWeight.put(new Integer(Integer.parseInt(temp)), new Float(
						weight));
			}
		}
	}

	private float findFrequency(String doc, String term) {
		float freq = 0;
		boolean flg = false;
		String temp = doc;
		String str1 = "", str2 = "";
		if (term.indexOf(" ") != -1)//dar soorati ke kalame moratab dashte
		// bashim do ghesmat ra joda mikonimf
		{
			str2 = term.substring(term.indexOf(" ") + 1);//kalame dovomi ra bar
			// midarim
			str1 = term.substring(0, term.indexOf(" "));// kalame avali ra bar
			// midarim
		}
		while (doc != null) {
			if (term.indexOf(" ") != -1) {
				int first = doc.indexOf(str1);// index avali ra miyabim
				String tempString;
				if (first == -1)
					break;
				boolean flag = false;// in migooyad in term inja peida shod ya
				// na
				doc = doc.substring(first + str1.length() + 1);
				String useString = "", cutString = "";
				if (doc.indexOf(" ") != -1) {
					useString = doc.substring(0, doc.indexOf(" "));
					cutString = doc.substring(doc.indexOf(" ") + 1);
				} else {
					if (doc.equals(str2))
						freq++;
					break;
				}
				if (useString.equals(str2)) {
					flag = true;
				}
				//useString = cutString.substring(0, cutString.indexOf(" "));
				//cutString = doc.substring(doc.indexOf(" ") + 1);
				if (doc.indexOf(" ") != -1) {
					useString = doc.substring(0, doc.indexOf(" "));
					cutString = doc.substring(doc.indexOf(" ") + 1);
				} else {
					if (doc.equals(str2))
						freq++;
					break;
				}
				if (useString.equals(str2)) {
					flag = true;
				}
				//useString = cutString.substring(0, cutString.indexOf(" "));
				if (doc.indexOf(" ") != -1) {
					useString = doc.substring(0, doc.indexOf(" "));
				} else {
					if (doc.equals(str2))
						freq++;
					break;
				}
				if (useString.equals(str2)) {
					flag = true;
				}
				if (flag == true) {
					freq++;
				}
			} else {
				while (true) {
					if (doc.indexOf(term) != -1) {
						freq++;
						doc = doc.substring(doc.indexOf(term) + term.length(),
								doc.length());
					} else {
						flg = true;
						break;
					}
				}
			}
			if (flg)
				break;
		}
		//		doc="";
		//		temp="";
		return freq / numberOfWordsInDoc(temp);
	}

	private int numberOfWordsInDoc(String doc) {
		int cntr = 0;
		String temp = "";
		while (true) {
			doc = doc.trim();
			if (doc.indexOf(" ") != -1) {
				temp = doc.substring(0, doc.indexOf(" "));
				cntr++;
			} else if (doc.indexOf(" ") == -1) {
				if (doc.length() > 0)
					cntr++;
				break;
			}
			doc = doc.substring(doc.indexOf(" ") + 1);
		}

		//		cntr++;
		int termNum;
		if (cntr == 0)
			return 0;
		if (cntr == 1)
			return 1;
		if (cntr == 2)
			return 3;
		return (4 * cntr - 6);
		//	return cntr++;

	}

	private Vector pairWord = new Vector();

	public void insertWordsHash(Set wordsSet, String line) {
		String temp;
		while (true) {
			line.trim();
			if (line.indexOf(" ") != -1) {
				temp = line.substring(0, line.indexOf(" "));
				wordsSet.add(temp);
				pairWord.add(temp);
			} else if (line.indexOf(" ") == -1) {
				if (line.length() > 0) {
					wordsSet.add(line);
					pairWord.add(line);
				}
				break;
			}
			line = line.substring(line.indexOf(" ") + 1);
		}
		if (pairWord.size() > 0) {
			String dummy = "";
			// dar code zir ma fasele meydani ha ra dar nazar migirim
			for (int i = 0; i < pairWord.size() - 3; i++) {
				for (int j = 1; j < 4; j++) {
					if (!((String) pairWord.get(i)).equals((String) pairWord
							.get(i + j))) {
						dummy = (String) pairWord.get(i) + " "
								+ (String) pairWord.get(i + j);//beine
						// kalamat
						// fasele
						// migozarim
						wordsSet.add(dummy);
						dummy = "";
					}

				}
			}
			// dar r khate zir un anasory ke fasele meydanieshan kam ast va
			// dar for
			// bala fasele meydanieshan dar nazar gerefte nashod gharar dade
			// mishavad
			if (pairWord.size() - 3 >= 0) {
				if (!((String) pairWord.get(pairWord.size() - 3))
						.equals((String) pairWord.get(pairWord.size() - 1))) {
					dummy = (String) pairWord.get(pairWord.size() - 3) + " "
							+ (String) pairWord.get(pairWord.size() - 1);
					wordsSet.add(dummy);
				}
			}
			if (pairWord.size() - 2 >= 0) {
				if (!((String) pairWord.get(pairWord.size() - 2))
						.equals((String) pairWord.get(pairWord.size() - 1))) {
					dummy = (String) pairWord.get(pairWord.size() - 2) + " "
							+ (String) pairWord.get(pairWord.size() - 1);
					wordsSet.add(dummy);
				}
			}
			if (pairWord.size() - 3 >= 0) {
				if (!((String) pairWord.get(pairWord.size() - 3))
						.equals((String) pairWord.get(pairWord.size() - 2))) {
					dummy = (String) pairWord.get(pairWord.size() - 3) + " "
							+ (String) pairWord.get(pairWord.size() - 2);
					wordsSet.add(dummy);
				}
			}
			pairWord.clear();
		}
	}

	//	public static void main(String[] args) {
	//		String path = "c:\\testhome\\";
	//		Search srch = new Search(new File(path + "lexical.txt"),path, new
	// File(path
	//				+ "query.txt"),0.5f);
	//
	//	}
}