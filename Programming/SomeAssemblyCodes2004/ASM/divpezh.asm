.model	small
.stack	16
.data
.386
BASI	DD	1DCD6500H
ASHART	DD	?
BOOL	DB	0
NAMA	DB	?
MANFI	DB	"-$"
FIRST0	DB	0
SEC0	DB	0
COUNT1	DB	0
COUNT2	DB	0
POWER	DB	10
DIVISIONZERO	DB	"DIVISION BY ZERO$"
DIVIDEND	DB	"THE DIVIDEND IS: $"
DIVISOR		DB	"THE DIVISOR IS:  $"
INDIVIDEND	DB	"INPUT THE DIVIDEND IN DECIMAL: $"
INDIVISOR	DB	"INPUT THE DIVISOR IN DECIMAL: $"
THERESULT	DB	"THE RESULT IS:   $"
TEMP	DW	?
TEMP1	DB	?
TEMP2	DB	?
PURENUM	DW	?
PWR	DW	16
NPWR	DW	0
DECI	DW	?
LIMIT	DW	?
COUNTER	DB	30
MINUS	DW	0
NUMBER1	DW	0
NUMBER2	DW	0
AND1	DW	0000001111111111B
AND2	DW	0111110000000000B
AND3	DW	8000H
MAGNITUDE	DW	?
RESULT	DW	?
AJIB	DW	0
SAHIH	DW	0
ASHAR	DD	0
DAH	DD	10
ETEMP1	DD	?
ETEMP2	DD	?
THIRTYTWO	DW	32
Input Label BYTE
MAX	DB	10
LEN	DB	?
CHAR	DB	10	DUP(' ')
.code
MAIN	PROC						;MAIN PROCEDURE
	MOV	AX,@DATA
	MOV	DS,AX
	MOV	AX,0600H
	MOV	BH,07H
	MOV	CX,0
        MOV     DX,314FH
	INT	10H
	MOV	DX,0
	CALL	SETCURSOR
	MOV	AH,09H
	LEA	DX,INDIVIDEND
	INT	21H
	CALL	INPUTNUM				
	CMP	CHAR,48
	JNE	DOWN
	CMP	LEN,1
	JNE	DOWN
	MOV	NUMBER1,0
	MOV	FIRST0,1
	JMP	DOWN2
DOWN:	CALL	COUNTDOT				
	CALL	COPUTEDOT				
	CALL	CONVERTER				
	MOV	NUMBER1,AX
	CALL	ZEROSET
DOWN2:
	MOV	DX,0100H
	CALL	SETCURSOR
	MOV	AH,09H
	LEA	DX,INDIVISOR
	INT	21H
	CALL	INPUTNUM				
	CMP	CHAR,48
	JNE	DOWN3
	CMP	LEN,1
	JNE	DOWN3
	MOV	NUMBER2,0
	MOV	SEC0,1
	JMP	DOWN4
DOWN3:	CALL	COUNTDOT				
	CALL	COPUTEDOT				
	CALL	CONVERTER				
	MOV	NUMBER2,AX
DOWN4:
	MOV	AX,0600H
	MOV	BH,07H
	MOV	CX,0
        MOV     DX,314FH
	INT	10H
	MOV	DX,0
	CALL	SETCURSOR
	MOV	AH,09H
	LEA	DX,DIVIDEND
	INT	21H
	MOV	AX,NUMBER1
	CALL	SHOW	
	MOV	DX,0100H
	CALL	SETCURSOR
	MOV	AH,09H
	LEA	DX,DIVISOR
	INT	21H
	MOV	AX,NUMBER2
	CALL	SHOW
	MOV	DX,0200H
	CALL	SETCURSOR
	MOV	AH,09H
	LEA	DX,THERESULT
	INT	21H
	CMP	SEC0,0
	JE	DOWN5
	MOV	AX,0900H
	LEA	DX,DIVISIONZERO
	INT	21H
	JMP	DOWN6
DOWN5:	CALL	DIVISION
	MOV	AX,RESULT
	CALL	SHOW
DOWN6:
	MOV	DX,0300H
	CALL	SETCURSOR
	MOV	AX,0900H
	LEA	DX,THERESULT
	INT	21H
	CALL	SHOWDECIMAL

	MOV	AX,4C00H
	INT	21H
MAIN	ENDP
SHOWDECIMAL	PROC	NEAR

	MOV	AX,RESULT
	AND	AX,AND2
	SHR	AX,10
	MOV	NAMA,AL
	CMP	AL,16
	JL	NEGATIVEPOWER
	MOV	AX,RESULT
	AND	AX,AND1
	ADD	AX,0400H
	MOV	TEMP1,26
	MOV	BL,NAMA
	SUB	TEMP1,BL

LOOP1:	
	CMP	TEMP1,0
	JE	ENDLOOP1
	SHR	AX,1
	DEC	TEMP1
	JMP	LOOP1
ENDLOOP1:
	MOV	SAHIH,AX

	MOV	CX,RESULT
	AND	CX,AND1
	MOV	BL,NAMA
	MOV	TEMP1,BL
	SUB	TEMP1,10
LOOP2:
	CMP	TEMP1,0
	JE	ENDLOOP2
	SHL	CX,1
	DEC	TEMP1
	JMP	LOOP2
ENDLOOP2:	
	MOV	EAX,BASI
	MOV	EBX,2
LOOP3:
	SHL	CX,1
	JNC	RAD
	ADD	ASHAR,EAX
RAD:
	MOV	EDX,0
	DIV	EBX
	CMP	EDX,0
	JE	LOOP3
	JMP	ENDSHOW
NEGATIVEPOWER:
	MOV	CX,RESULT
	AND	CX,AND1
	ADD	CX,0400H
	MOV	BL,NAMA
	MOV	TEMP1,BL
	SUB	TEMP1,10
LOOP22:
	CMP	TEMP1,0
	JE	ENDLOOP22
	SHL	CX,1
	DEC	TEMP1
	JMP	LOOP22
ENDLOOP22:	
	MOV	EAX,BASI
	MOV	EBX,2
LOOP33:
	SHL	CX,1
	JNC	RAD1
	ADD	ASHAR,EAX
RAD1:
	MOV	EDX,0
	DIV	EBX
	CMP	EDX,0
	JE	LOOP33
	JMP	ENDSHOW
	
ENDSHOW:	
	MOV	EAX,ASHAR
	MOV	EBX,10000000
	MOV	EDX,0
	DIV	EBX
	CALL	DECIMALSHOW

	MOV	AX,0200H
	MOV	BH,0
	MOV	DH,3
	MOV	DL,COUNTER
	INT	10H
	DEC	COUNTER
	MOV	EAX,BASI
	MOV	EBX,4
	MOV	EDX,0
	DIV	EBX
	MOV	BASI,EAX
	MOV	EAX,ASHAR
	MOV	EBX,10
LOOP4:	CMP	EAX,BASI
	JGE	BOZ
	MOV	AX,0200H
	MOV	DX,'0'
	INT	21H
	DEC	COUNTER
	MOV	EAX,ASHART
	MOV	EDX,0
	DIV	EBX
	MOV	ASHART,EAX

BOZ:
	MOV	AX,0200H
	MOV	BH,0
	MOV	DH,3
	MOV	DL,COUNTER
	INT	10H

	MOV	AX,0200H
	MOV	DX,'.'
	INT	21H
	DEC	COUNTER

	MOV	EAX,0
	MOV	AX,SAHIH
	CALL	DECIMALSHOW

	MOV	AX,0200H
	MOV	BH,0
	MOV	DH,3
	MOV	DL,COUNTER
	INT	10H

	CMP	MAGNITUDE,0
	JE	POSI
	MOV	AX,0900H
	LEA	DX,MANFI
	INT	21H
POSI:

	RET
SHOWDECIMAL	ENDP
DECIMALSHOW	PROC	NEAR
	WHILAK:
		MOV	EDX,0
		DIV	DAH

		MOV	ETEMP1,EAX
		MOV	ETEMP2,EDX

		MOV	AX,0200H
		MOV	BH,0
		MOV	DH,3
		MOV	DL,COUNTER
		INT	10H

		MOV	EDX,0

		MOV	AX,0200H
		MOV	EDX,ETEMP2
		ADD	EDX,48
		INT	21H

		MOV	EAX,0
		MOV	EAX,ETEMP1
		DEC	COUNTER
		CMP	EAX,0
		JNE	WHILAK
RET
DECIMALSHOW	ENDP

DIVISION	PROC	NEAR
	CMP	FIRST0,0
	JE	HERE
	MOV	RESULT,0
	JMP	ENDDIV
HERE:	MOV	DX,0
	MOV	AX,NUMBER1
	AND	AX,AND1
	MOV	BX,NUMBER2
	AND	BX,AND1
	ADD	AX,0400H
	ADD	BX,0400H
	CMP	AX,BX
	JGE	DEF
	MOV	CX,0400H
	MOV	AJIB,CX
DEF:	MUL	THIRTYTWO
	CALL	SHIFTRIGHTER
	DIV	BX
	CALL	SHIFTER
	MOV	RESULT,AX
	MOV	AX,NUMBER1
	MOV	BX,NUMBER2
	AND	AX,AND2
	AND	BX,AND2
	ADD	AX,4000H
	SUB	AX,BX
	SUB	AX,AJIB
	ADD	RESULT,AX
	MOV	AX,RESULT
	MOV	AX,NUMBER1
	MOV	BX,NUMBER2
	AND	AX,AND3
	AND	BX,AND3
	XOR	AX,BX
	MOV	MAGNITUDE,AX
	ADD	RESULT,AX
ENDDIV:	RET
DIVISION	ENDP
INPUTNUM	PROC	NEAR				;GETS A DECIMAL NUMBER FROM USER
	MOV	AH,0AH				
	LEA	DX,Input
	INT	21H
	;MOV	CHAR+10,'$'
	LEA	SI,CHAR
	MOV	CX,0
	MOV	CL,LEN
	RET
INPUTNUM	ENDP
COUNTDOT	PROC	NEAR				;COUNTS THE NUMBER OF DIGIGTS BEFORE AND AFTER "." CHAR
	MOV	BL,[SI]
	CMP	BL,45
	JNE	POSITIVE
	MOV	MINUS,8000H
	DEC	CX
	INC	SI
POSITIVE:
	MOV	BL,[SI]
	CMP	BL,48
	JNE	DECIMAL
	CMP	LEN,1
	JE	ENDCOUNT
	INC	SI
	DEC	CX
	DECIMAL:
		WHILE1:		
			MOV	BL,[SI]
			CMP	BL,46
			JE	ENDWHILE1
			INC	SI
			DEC	CX
			INC	COUNT1
			CMP	CX,0
			JNE	WHILE1
			JMP	ENDCOUNT
		ENDWHILE1:
			INC	SI
			DEC	CX
			WHILE2:
				INC	COUNT2
			LOOP WHILE2			
ENDCOUNT:
	RET
COUNTDOT	ENDP
COPUTEDOT	PROC	NEAR				;COMPUTES THE NUMBER ENTERED AND TURNS IT IN BINARY FORM	
	MOV	CX,0
	MOV	CL,COUNT1
	MOV	AX,1
	WHILE3:
		DEC	CX
		CMP	CX,0
		JE	ENDWHILE3
		MUL	POWER
	JMP	WHILE3
	ENDWHILE3:
	MOV	CL,COUNT1
	LEA	SI,CHAR
	MOV	BL,[SI]	
	CMP	BL,45
	JNE	ZEROCHECK
	INC	SI
	ZEROCHECK:
	MOV	BL,[SI]
	CMP	BL,48
	JNE	WHILE4
	INC	SI
	JMP	NONPURE
	WHILE4:
		MOV	BL,[SI]
		SUB	BX,48
		MOV	TEMP,AX		
		MUL	BX
		ADD	PURENUM,AX
		MOV	AX,TEMP
		DIV	POWER		
		INC	SI
	LOOP	WHILE4
NONPURE:
	MOV	CX,0
	MOV	CL,COUNT2
	MOV	AX,1
	WHILE5:
		DEC	CX
		CMP	CX,0
		JE	ENDWHILE5
		MUL	POWER
	JMP	WHILE5
	ENDWHILE5:
	MOV	CL,COUNT2
	INC	SI
	WHILE6:
		MOV	BL,[SI]
		SUB	BX,48
		MOV	TEMP,AX		
		MUL	BX
		ADD	DECI,AX
		MOV	AX,TEMP
		DIV	POWER		
		INC	SI
	LOOP	WHILE6
	MOV	AX,PURENUM
	MOV	TEMP,AX
	CMP	COUNT2,0
	JE	ENDWHILE7
	MOV	CX,0
	MOV	CL,COUNT2
	MOV	AX,1
	WHILE11:
		CMP	CX,0
		JE	ENDWHILE11
		MUL	POWER
		DEC	CX
	JMP	WHILE11
	ENDWHILE11:
	MOV	LIMIT,AX
	MOV	AX,PURENUM
	MOV	TEMP,AX
	MOV	BX,DECI
	MOV	CX,7

	WHILE7:
		ADD	BX,BX
		CMP	CX,0
		JE	ENDWHILE7
		DEC	CX		
		SHL	AX,1
		CMP	BOOL,0
		JNE	BAADI
		INC	NPWR
	BAADI:	CMP	BX,LIMIT
		JL	LITTLE
		MOV	BOOL,1
		ADD	AX,1
		SUB	BX,LIMIT
		CMP	BX,0
		JE	ENDWHILE7
		CMP	AX,7FFFH
		JGE	ENDWHILE7
	LITTLE:		
		JMP	WHILE7				
	ENDWHILE7:	
		RET
COPUTEDOT	ENDP
CONVERTER	PROC	NEAR				;CONVERTS INTO MANTISSA	
	CALL	SHIFTER
	MOV	CX,0			
	SHL	CX,1
	MOV	BX,TEMP
	CMP	TEMP,0
	JE	NEGATIVEP
	WHILEP:
		DEC	PWR
		SHL	BX,1
		JNC	WHILEP
		MOV	BX,PWR
		ADD	BX,16
		SHL	BX,10
		MOV	PWR,BX
		ADD	AX,PWR
		JMP	MAG
	NEGATIVEP:
		MOV	BX,16
		SUB	BX,NPWR
		SHL	BX,10
		MOV	PWR,BX
		ADD	AX,PWR
	MAG:
		ADD	AX,MINUS
;	CALL	SHOW
	RET
CONVERTER	ENDP
SHOW	PROC	NEAR					;SHOWS THE NUMBER IN MANTISSA FORMAT
	MOV	CX,16
	WHILE0:
		MOV	BX,0		
		SHL	AX,1
		ADC	BX,0
		MOV	TEMP,AX
		MOV	AX,0200H
		MOV	DL,BL
		ADD	DL,48
		INT	21H
		MOV	AX,TEMP
		DEC	CX
		CMP	CX,0
		JNE	WHILE0
		RET
SHOW	ENDP
ZEROSET	PROC	NEAR					;RESETS ALL OF REGISTERS AND VARIABLES
	MOV	NUMBER1,AX
	MOV	AX,16
	MOV	PWR,AX
	MOV	AX,0
	MOV	BX,0
	MOV	CX,0
	MOV	COUNT1,AL
	MOV	COUNT2,AL
	MOV	TEMP,AX
	MOV	TEMP1,AL
	MOV	TEMP2,AL
	MOV	PURENUM,AX
	MOV	NPWR,AX
	MOV	DECI,AX
	MOV	LIMIT,AX
	MOV	MINUS,AX
	RET
ZEROSET	ENDP
SETCURSOR	PROC	NEAR				;SETS CURSOR
	MOV	AH,02H
	MOV	BH,0
	INT	10H
	RET
SETCURSOR	ENDP
SHIFTER	PROC	NEAR	
WHILE8:				
		SHL	AX,1
		JNC	WHILE8
		SHR	AX,6
		RET
SHIFTER	ENDP
SHIFTRIGHTER	PROC	NEAR
WHILEN:
SHR	BX,1
JNC	WHILEN
SHL	BX,1
ADD	BX,1
RET
SHIFTRIGHTER	ENDP	
	end main