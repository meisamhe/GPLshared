package ninja.simpleRMI;

import ninja.rmi.NinjaObjectOutputStream;
import ninja.rmi.NinjaObjectInputStream;
import ninja.Domain.DataOutputStream;
import ninja.Domain.Serializable;
import ninja.Domain.DataInputStream;
import ninja.Domain.ServerRequestEntity;
import peer2me.domain.Hashtable;
import peer2me.framework.FrameworkFrontEnd;


/* Generated by RMICompiler.jc (mdw@cs.berkeley.edu) -- do not edit */
public class TheServiceImpl__RMIStub extends ninja.rmi.NinjaRemoteStub implements TheService {
 //Thread mainThread;
  private static  long _hash = -255684353965433088L;
  boolean wake;
  boolean foundNode=false;

    public TheServiceImpl__RMIStub(){}

    public void writeObject(DataOutputStream dos) {
       dos.writeLong(_hash);
       super.writeObject(dos);
     }
    public Serializable readObject(DataInputStream dis) {
        _hash = dis.readLong();
        super.readObject(dis);
        return this;  //To change body of implemented methods use File | Settings | File Templates.
    }

  public TheServiceImpl__RMIStub(ninja.rmi.NinjaRemoteRef ref) {
    super(ref);
  }

    public void remoteReferenceSet (ninja.rmi.NinjaRemoteRef ref){
       setRemoteReference(ref) ;
    }

  // Generated methods begin here

  public synchronized void someFunction() throws Exception {
    while (!foundNode) {}
    int _opnum = 0;
    ninja.rmi.NinjaRemoteCall _remcall = _ref.newCall(_opnum, _hash);
    try {
      NinjaObjectOutputStream _objout = _remcall.getOutputStream();
    } catch (Exception _e) {
//        throw new java.rmi.MarshalException("Error marshaling arguments", _e);
        _e.printStackTrace();
    }
      try {
          _ref.invoke(_remcall);
      } catch (Exception e) {
          e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
      }
//    try {
//
//    } catch (java.rmi.RemoteException _e) {
//      throw _e;
//    } catch (java.lang.Exception _e) {
//      throw new java.rmi.UnexpectedException("Unexpected RMI exception", _e);
//    }

    _ref.done(_remcall);
    return;
  }

  public synchronized int addFunction(int param0, int param1) throws Exception {
    while (!foundNode) {}
    int _opnum = 1;
    ninja.rmi.NinjaRemoteCall _remcall = _ref.newCall(_opnum, _hash);
    try {
      NinjaObjectOutputStream _objout = _remcall.getOutputStream();
      _objout.writeInt(param0);
      _objout.writeInt(param1);
    } catch (Exception _e) {
//      throw new java.rmi.MarshalException("Error marshaling arguments", _e);
         _e.printStackTrace();
    }
    try {
      _ref.invoke(_remcall);
//    } catch (Exception _e) {
//      throw _e;
    } catch (java.lang.Exception _e) {
//      throw new java.rmi.UnexpectedException("Unexpected RMI exception", _e);
        _e.printStackTrace();
    }

    int _result;

    try {
//      mainThread=Thread.currentThread();
//      mainThread.wait();
        wake = false;
		while (!wake)  {}
      NinjaObjectInputStream _in = _remcall.getInputStream();
      _result = (int)_in.readInt();
    } catch (Exception _e) {
//          throw new java.rmi.UnmarshalException("Error unmarshaling return", _e);
        _e.printStackTrace();
        return 0;
    } finally {
      _ref.done(_remcall);
    }
    return _result;
  }

  // End of generated code

    public void notifyAboutException(String location, Exception exception) {}

    public void notifyAboutFoundNode(String nodeAddress, String remoteNodeName) {
        f.connectToNode(nodeAddress);
        ((FrameworkFrontEnd)f).participatingNodeAddress=nodeAddress;
        foundNode=true;
    }

    public void notifyAboutReceivedTextPackage(String senderName, String textMessage) {
        DataInputStream.flush(new ServerRequestEntity(textMessage,((FrameworkFrontEnd)f).participatingNodeAddress),null);
//        mainThread.notify();
        wake=true;
    }
    //        recievedResponse=textMessage;

    public void notifyAboutReceivedFilePackage(String senderName, String filePath) {}

    public void notifyAboutParticipants(Hashtable participants) {
         this.participants = participants;
    }
}
