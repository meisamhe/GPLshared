
% For platform FFBS of BASS model (Modified to only include only platform
% data and not add-on's state equation anymore)


function SumMeanStepAheadForecast = BEKFPMOnlyPlatformCompetitor(x) %,b1,b2,alpha

global yp pp m0p C0p vp wp  yc caddon

uTp(1:pT) =   ppparam.*(eta*caddon(1:(size(yc,1)-1),:)+M0param) + (eta*caddon(1:(size(yc,1)-1),:)+M0param).*(yc(1:(size(yc,1)-1),:)*npparam');
GTp(:,:)  =   diag([M0param ppparam qpparam eta npparam]);


y = yp(1:pT);
p = pp;
,m0,C0,v,w,GT,uT,yc,caddon
pp,m0p(:,:),C0p(:,:),vp,wp,GTp(:,:),uTp(1:pT),yc,caddon)
% Author:  Norris Bruce... June 2013
% Modified: Meisma Hejazinia ... Dec 2013

% as AMO is monthly data
yc(1:18, 3)=x(1);
yc(19:49, 3)=x(2);
yc(50:79, 3)=x(3);
yc(80:110, 3)=x(4);
yc(111:140, 3)=x(5);
yc(141:171, 3)=x(6);
yc(172:202, 3)=x(7);
yc(203:230, 3)=x(8);
yc(231:261, 3)=x(9);
yc(262:291, 3)=x(10);
yc(292:322, 3)=x(11);
yc(323:352, 3)=x(12);
yc(353:383, 3)=x(13);
yc(384:414, 3)=x(14);
yc(415:444, 3)=x(15);
yc(445:475, 3)=x(16);
yc(476:505, 3)=x(17);
yc(506:536, 3)=x(18);
yc(537:567, 3)=x(19);
yc(568:595, 3)=x(20);
yc(596:626, 3)=x(21);
yc(627:656, 3)=x(22);
yc(657:687, 3)=x(23);
yc(688:717, 3)=x(24);
yc(718:748, 3)=x(25);
yc(749:779, 3)=x(26);
yc(780:809, 3)=x(27);
yc(810:840, 3)=x(28);
yc(841:870, 3)=x(29);
yc(871:901, 3)=x(30);
yc(902:932, 3)=x(31);
yc(933:961, 3)=x(32);
yc(962:993, 3)=x(33);
yc(994:1025, 3)=x(34);
yc(1026:1057, 3)=x(35);
yc(1058:1083, 3)=x(36);
yc(1084:1114, 3)=x(37);
yc(1115:1145, 3)=x(38);
yc(1146:1175, 3)=x(39);
yc(1176:1206, 3)=x(40);
yc(1207:1236, 3)=x(41);
yc(1237:1267, 3)=x(42);
yc(1268:1298, 3)=x(43);
yc(1299:1326, 3)=x(44);
yc(1327:1357, 3)=x(45);
yc(1358:1387, 3)=x(46);
yc(1388:1418, 3)=x(47);
yc(1419:1423, 3)=x(48);

OptimizedForecast = zeros(1,T);

 T   =  size(y,1);
 m = repmat(m0,[1 T]); C = double(repmat(C0,[1 1 T]));   C(:,:,1)=C0;  m(:,1)= m0; 
 d= diag(GT(:,:,1));
 mt  =  m0; Ct = C0;      g  = GT;

 % kalman Filtering
 for t      =   1:T

%      if (floor(t/100) == t/100)
%         t
%      end;
     g      =   Jmcm(d,mt,yc,caddon,t); %alpha,
     r      =   g*Ct*g' + w;                        % variance of prior at t-1

     a      =   fmcm(d,mt,yc,caddon,t) + uT(t,:); %alpha,

     Ja = 1; % for this case there is no state equation for add-ons to use
     h = a; % for this case there is no state equation for add-ons to use 
     F = Ja;   
     forecast = h;
     OptimizedForecast(1,t)  = forecast;    % n for all addons and 1 for platform

     % we use relvar here in order to only select relevant elements of full
     % covar matrix

     q      =   F*r*F' + v(1,1);                         % variance of 1-step ahead prediction
     e = y(t,:) - forecast(1); % for this case there is no state equation for add-ons to use 

     A      =   r*F'*(q\speye(size(q)));

     mt     =    a + A * e; Ct = r - A*q*A';
     Ct     =    (Ct+Ct')/2;
     C(:,:,t)=Ct;
     m(:,t)= mt; % mean variance of posterior at t

     
     %===================== iterated EKF, use mt========================
     %[mt,Ct] = iter_EKF(A,y,t,v,r,a,b1,b2,MSE,MAD,Y1); %=================
     %===================== iterated EKF, use mt========================
 end;
 
 SumMeanStepAheadForecast = sum(OptimizedForecast);